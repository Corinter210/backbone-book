<% @title = 'Models and collections' %>

<h1>
  Models and collections
</h1>

<h2>
  Models
</h2>

<p class="mark">
  Although they reflect data that's on the server, they're not meant to be a mirror of what the server model is, so this business of replicating every relation and validation that exists on the other side is time wasted. It may come down to that, but there'll be a use case on the client app to justify it, or it's useless.
</p>

<%= partial :- %>

<p class="mark">
  Views will listen to attribute changes that happen on your models, so plan accordingly as you'll be listening to changes in specific attributes with views. For example, it's fine having an attribute in <code>Book</code> called <code>paid</code> that's stale, as in it exists only on the client side (the server knows it's paid because there's an associated payment entry). So just setting <code>paid</code> to <code>true</code> re-renders whatever view associated itself with this model and renders an appropriate template that shows that this thing is paid for.
</p>

<p>
  Before you cry that Backbone will always send every model attribute to the server when you <code>save()</code>, the solution is simple: declare a list of stale attributes (they're likely gonna be lesser in number than the others), and omit them from what gets sent by overriding <code>toJSON()</code>:
</p>

<pre><code>var Book = Backbone.Model.extend({
  stale: ['paid'],

  toJSON: function() {
    return _.omit(this.attributes, this.stale);
  }
});</code></pre>

<%= partial :- %>

<p class="mark">
  Don't clutter models with a lot of methods for rendering attributes in different ways, human-friendly, different date formats, and so on. Write a presenter object that's separate from the model, which you can pass the model to it's methods and it'll handle that for you. Then pass that presenter to the view (more on that in the <a>views</a> chapter).
</p>

<h2>
  Collections
</h2>

<p>
  Collections are cool and shit.
</p>

<h2>
  API <span class="amp">&amp;</span> strategies
</h2>

<p class="mark">
  Most apps communicate with a server using HTTP with a RESTful API. So the API URLs are of summary importance. Don't scatter them around the app. Write a module named <code>apiUrl</code> which exports a function with the same name. That module acts like a catalog of URLs, and model or collection that talks with the API has to require it. It looks like this:
</p>

<pre><code># List of API URLs.
var URLs = {
  books: function() {
    return "/api/books";
  },
  book: function(id) {
    return "/api/books/" + id;
  },
  subscriptions: function(userId, id) {
    return "/api/users/" + userId + "/subscriptions/" + id;
  }
}

# Helper for accessing the URL list. Think of it as something similar
# to Rails' URL helpers.
var apiUrl = function() {
  var args = [].slice.call(arguments),
      name = args.unshift();
  return URLs[name] ? URLs[name].apply(URLs, args) : undefined;
}

if (typeof module !== 'undefined') {
  module.exports = apiUrl
} else {
  this.apiUrl = apiUrl
}</code></pre>

<p>
  Then forever (no exceptions) refer to URLs by calling this module. In a <code>Book</code> model, it'd look like this:
</p>

<pre><code>var Book = Backbone.Model.extend({
  url: function() {
    return apiUrl('book', this.id);
  }
});</code></pre>

<%= partial :- %>

<p class="mark">
  Data associations are easy to solve without plugins <strong>if your API is sane</strong>, so it's worth making it so otherwise your data layer will absorb your API's ugliness and amplify it by one hundred. Assume we have authors for those books I spoke of, and when fetching an author, I want to grab their books along. Say the API looks like this:
</p>

<pre><code>GET   /api/authors/1?with=books</code></pre>

<p>
  And by calling this URL I get the author object along with a <code>books</code> attribute which is an array of book objects, here's how you'd do it:
</p>

<pre><code>var Author = Backbone.Model.extend({
  initialize: function() {
    this.books = new Books(this.get('books'), { url: apiUrl('books', this.id) });
  }
});</code></pre>

<p>
  Now make sure from now on you refer to <strong>the collection</strong> to access the values and not the container model attribute. The collection will contain the representation of what the author's books are, and ensure the book model instances are in sync with the server.
</p>

<%= partial :- %>

<p class="mark">
  Loading associated data is trivial once you think for a second about what makes sense. Assume you have this URL in your app:
</p>

<pre><code>/authors/:id/books</code></pre>

<p>
  You need to grab the author first and then his/her books. This could go one of two ways: you have loaded the author before, and thus it's in memory, or you need to grab it from the server and then grab the books.
</p>

<p>
  Before you OCD about performance and think you should do this in one request, consider you're potentially creating an endpoint that will send down a huge amount of information. Correct use of caching, specifically <a href="http://en.wikipedia.org/wiki/HTTP_ETag">ETags</a>, will mitigate these problems by a lot.
</p>

<p>
  Inside the method that's called for that route, here's how you'll do it.
</p>

<pre><code>showBooks: function(authorId) {
  var author = App.Authors.get(authorId);
  if (author) {
    author.books.fetch({
      success: function() {
        view = new BooksList collection: author.books
        // Render the view.
      }
    });
  } else {
    author = new Author({id: authorId});
    author.fetch({
      success: function() {
        App.Authors.add(author);
        author.books.fetch(
          // Same as in the case above.
        );
      }
    });
  }
</code></pre>

<p>
  I can hear you having a heart attack over code repetition. But for starters, having the whole code that describes what happens when you visit each URL <strong>in the router itself</strong> is a terrible idea. I'll explain this refactor further ahead in the <a>router chapter</a>.
</p>
