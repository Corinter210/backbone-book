<% @title = 'Views' %>

<h1>
  Views
</h1>

<p>
  Views are <strong>components</strong> for displaying a model or a collection. They oughta be testable in their own behaviour, and although they can at times use other views (e.g.: a view for rendering a list will likely render sub-views for individual entries), they should still work, as in not throw errors, when rendered on their own.
</p>

<%= partial :- %>

<p>
  Avoid interacting with the DOM indiscriminately. A view’s <code>render</code> method should be the only method that does it, so don’t do stuff like adding/removing class names through other methods when something in the model/collection changes.
</p>

<p>
  If the data changed, just re-render the view. What you <strong>can</strong> do, however, is make <code>render</code> more complex to accommodate use cases such as, for example, a model is currently being edited and you don’t want to destroy the form when the user is half-way through it. For example:
</p>

<pre class="language-coffeescript"><code>class BookListView extends Backbone.View
  template: JST['books/list_entry']

  # ...

  render: ->
    if @model.get('editing')
      unless confirm("Model has been modified. Discard changes?")
        return false
    @$el.html @template @model
    @</code></pre>

<pre class="language-javascript"><code>var BookListView = Backbone.View.extend({
  template: JST['books/list_entry'],

  // ...

  render: function() {
    if (this.model.get('editing')) {
      if (!confirm("Model has been modified. Discard changes?")) {
        return false;
      }
    }
    this.$el.html(@template(this.model));
    return this;
  }
});</code></pre>

<p>
  Rendering should be a <strong>destructive operation as far as what’s in the container element goes</strong>. Calling <code>render</code> by itself should never append anything to the DOM. Instead, it should just clear what’s in the the component element and render the template in again (it’s what happens when you call <code>@$el.html()</code> passing a rendered template object to it).
</p>

<p>
  A good test for this is whether calling <code>render</code> repeatedly on any view breaks it or something else. It <strong>shouldn't</strong>.
</p>

<%= partial :- %>

<p>
  Following the previous tip means it’s mostly up to the template to handle every possible state of the model, and things can get hairy if you happen to have a bunch of those. For example, in the following <a href="https://github.com/netzpirat/haml-coffee">haml-coffee</a> template:
</p>

<pre><code>- if @model.get('paid') and not @model.get('returned')
  %p
    This book is paid for! Thanks!
- else if @model.get('overdue')
  %p
    You need to pay for this book immediately!
- else if (@model.get('paid') and @model.get('returned'))
  %p
    You returned this book to the store. Here’s your money back.
# ...</code></pre>

<p>
  This example happens to be quite slim, but any 4+ tags with a lot of copy that you put in between each state, or maybe every permutation of states meaning a different copy needs to be shown, and you’re looking at a huge template in charge of too much.
</p>

<p>
  There are a few things you can do to mitigate that, but first, understand that if you’re using logic templates (as opposed to a <a href="http://mustache.github.io/">logic-less template</a> format), then the template really is a program and needs to be maintained.
</p>

<p>
  To make a long story short, you should use a presenter (see below for more on that). For the specific problem of too much markup, you can break the template into smaller units and render them as partials (smaller sub-templates) from within the template itself. The presenter will handle the intricacies of that for you.
</p>

<%= partial :- %>

<p>
  A presenter is a special type of object which you will pass a model to when creating a new instance, and in turn, you’ll pass it to a view. It’ll act as a wrapper for the model/collection, and have only presentation-related logic, and <strong>it’s not part of the Backbone suite</strong>.
</p>

<p>
  You could write a generic presenter object like this:
</p>

<pre class="language-coffeescript"><code># A generic presenter object for Backbone.Model
# =============================================

class ModelPresenter

  # presenter = new ModelPresenter model: model
  constructor: (options = {}) ->
    @model = options.model

  # Pass a template object and it’ll output it with the presenter’s
  # model attributes.
  partial: (template) ->
    template _.extend @, @model.attributes</code></pre>

<pre class="language-javascript"><code>// A generic presenter object for Backbone.Model
// =============================================

// presenter = new ModelPresenter({model: model});
var ModelPresenter = function(options) {
  var options = options ? options : {};
  this.model = options.model;
}

// Pass a template object and it’ll output it with the presenter’s
// model attributes.
ModelPresenter.prototype.partial = function(template) {
  return template(_.extend(this, this.model.attributes));
}</code></pre>

<p>
  Then for any particular case, subclass it and add more specific methods:
</p>

<pre class="language-coffeescript"><code># A presenter for the Book model
# ==============================

class BookPresenter extends ModelPresenter
  isPaid: ->
    !!@model.get('paid')

  isReturned: ->
    @model.get('paid') and @model.get('returned')</code></pre>

<pre class="language-javascript"><code>// A presenter for the Book model
// ==============================

var BookPresenter = _.extend(ModelPresenter.prototype, {
  isPaid: function() {
    return !!this.model.get('paid');
  },

  isReturned: function() {
    return this.model.get('paid') && this.model.get('returned');
  }
});</code></pre>

<p>
  In the corresponding view, instead of passing the model or the model’s attributes directly to a template, create a new presenter and pass it instead, like so:
</p>

<pre class="language-coffeescript"><code>class BookListView extends Backbone.View
  template: JST['books/list_entry']

  # ...

  render: ->
    presenter = new BookPresenter model: @model
    @$el.html @template presenter
    @</code></pre>

<pre class="language-javascript"><code>var BookListView = Backbone.View.extend({
  template: JST['books/list_entry'],

  // ...

  render: function() {
    var presenter = new BookPresenter({model: this.model});
    this.$el.html(this.template(presenter))
    return this;
  }
});</code></pre>

<p>
  Now the template can be vastly simplified:
</p>

<pre><code>- if @isPaid()
  = partial JST['books/paid_notice']
- else if @isReturned()
  = partial JST['books/returned_notice']</code></pre>

<p>
  Or you could go even further and make the <code>partial</code> method in <code>ModelPresenter</code> prettier, though then dependent on the <code>JST</code> object, which contains the templates, being present (pretty certain).
</p>

<pre class="language-coffeescript"><code>partial: (name) ->
  JST[name] _.extend(@, @model.attributes)</code></pre>

<pre class="language-javascript"><code>partial: function(name) {
  return JST[name](_.extend(this, this.model.attributes));
}</code></pre>

<p>
  You can now call partials like so:
</p>

<pre><code>- if @isPaid()
  = partial 'books/paid_notice'</code></pre>

<p>
  This may sound like a lot of work, but it’s all boilerplate you’ll write once and carry with you across projects, so it’s very worth it.
</p>

<%= partial :- %>

<p>
  I’ve been accessing templates through this object named <code>JST</code> throughout the examples. <a href="https://github.com/netzpirat/haml_coffee_assets">haml_coffee_assets</a> packages your templates and can export the object in a few different ways, but the idea isn’t new nor exclusive to the tool, and you can get the same thing going with pretty much any other.
</p>

<p>
  We need to get our templates to the views somehow. One simple way to do that is by putting them in an object, accessible via directory-like attribute names. It’s intuitive to just mirror the templates directory structure in it.
</p>

<p>
  That object will need to be visible to your views, which in the case of <a href="http://browserify.org/">browserify</a> means you’ll need to <code>export</code> the <code>JST</code> object and <code>require</code> it in every view. Alternatively if you’re using <a href="https://github.com/sstephenson/sprockets">Sprockets</a> (you are if you’re using Rails), just make sure the <code>JST</code> object lives in the <code>window</code> scope.
</p>

<p>
  Unsurprisingly, there are many ways to skin this cat. Tools like <a href="http://requirejs.org/">requirejs</a> allow you to load templates as dependencies when a view gets used (instanced, even), and it’ll handle caching for you. For <a href="http://gruntjs.com/">Grunt</a> there’s <a href="https://github.com/gruntjs/grunt-contrib-jst">grunt-contrib-jst</a>.
</p>

<p>
  This is one of those points that can be cut short by saying: it doesn’t really matter how you do it. Pick one that sits well with your stack and move on.
</p>

<%= partial :- %>

<p>
  The correct way to listen to a collection, model, or other kinds of events is by using the <code>listenTo</code> method. Never, <strong>ever</strong> use <code>model.on 'change'</code>.
</p>

<p>
  So, <strong>this is correct</strong>:
</p>

<pre class="language-coffeescript"><code>class MyView extends Backbone.View
  initialize: ->
    @listenTo @model, 'change', @render</code></pre>

<pre class="language-javascript"><code>var MyView = Backbone.View.extend({
  initialize: function() {
    this.listenTo(this.model, 'change', this.render);
  }
});</code></pre>

<p>
  While <strong>this is wrong</strong>:
</p>

<pre class="language-coffeescript"><code>class MyView extends Backbone.View
  initialize: ->
    @model.on 'change', @render</code></pre>

<pre class="language-javascript"><code>var MyView = Backbone.View.extend({
  initialize: function() {
    return this.model.on('change', this.render);
  }
});</code></pre>

<p>
  In the former you’re declaring that the view needs to listen to events on the model, whereas the latter modifies the model itself and ties it forever to the view instance, even if you call <code>remove</code>, which means the memory for the view won’t be freed when you get rid of it.
</p>

<p>
  In short, <strong>more accurate</strong> to say that the view needs to listen to changes in the model, and <code>listenTo</code> is the way to go.
</p>

<%= partial :- %>

<p>
  The way a Backbone view works by default, you need to specify a <code>tagName</code> and/or a <code>className</code>. I’m from the opinion that those details should live entirely in the template, since they are markup-related, and that the template should include the root element along with any CSS classes it may have.
</p>

<p>
  What that means is the <code>render</code> method takes a hit in terms of how complex it ends, but it’s worth it for the sake of isolation.
</p>

<pre class="language-coffeescript"><code>render: ->
  presenter = new BookPresenter model: @model
  $newEl = $(@template presenter)
  if @$el[0].tagName is $newEl[0].tagName
    @$el.html $newEl.html()
  else
    @setElement $newEl
  @</code></pre>

<pre class="language-javascript"><code>render: function() {
  var presenter = new BookPresenter({model: this.model});
  var $newEl = $(this.template(presenter));
  if (this.$el[0].tagName === $newEl[0].tagName) {
    this.$el.html($newEl.html());
  } else {
    this.setElement($newEl);
  }
  return this;
}</code></pre>

<p>
  Now instead of a template consisting of the view element’s <strong>contents</strong>, it will be a full representation of it. You can then drop this:
</p>

<pre class="language-coffeescript"><code>class BookListView extends Backbone.View
  template: JST['books/list_entry']
  tagName: 'li'
  className: 'book-list-entry'</code></pre>

<pre class="language-javascript"><code>var BookListView = Backbone.View.extend({
  template: JST['books/list_entry'],
  tagName: 'li',
  className: 'book-list-entry'
});</code></pre>

<p>
  And go with this:
</p>

<pre class="language-coffeescript"><code>class BookListView extends Backbone.View
  template: JST['books/list_entry']</code></pre>

<pre class="language-javascript"><code>var BookListView = Backbone.View.extend({
  template: JST['books/list_entry']
});</code></pre>

<p>With the template now containing the root element and it’s class name along:</p>

<pre><code>%li.book-list-entry
  %h1= @title
  ...</code></pre>

<p>
  Bear in mind you may need to copy more than just the markup from <code>newEl</code>, but also it's <code>class</code> attribute.
</p>

<%= partial :- %>

<p>
  Always handle data changes optimistically. <code>Backbone.Model</code> and <code>Backbone.Collection</code> both provide callbacks for when a change succeeds (returns a <code>2xx</code> status code) or fails (returns <code>4xx</code> or <code>5xx</code>), but you shouldn’t keep the UI waiting until a response comes back to re-render.
</p>

<p>
  When creating a new model, say, after filling a form and submitting it, the model should be immediately placed in a collection (if it belongs in one), and rendered. That’ll happen instantly as far as the user is concerned, which is great. The app will feel a lot snappier, and that’s one of the strengths of a JavaScript application.
</p>

<p>
  If the server errors out for any reason, you can act on that after adding the model to the collection and rendering, perhaps by re-rendering the model and with the view in “editing mode”, and let the user fix what’s wrong in a form again.
</p>

<p>
  You may want, however, to provide a faster way for a user to determine whether a model is valid or not right when submitting the form so there’s no delayed feedback loop. HTML5 provides <a href="http://diveintohtml5.info/forms.html">validations</a> (scroll down to near the end) at the form level. This is excellent if all data input happens through a form, as the browser won’t let the form be submitted until all the fields are valid.
</p>

<p>
  If not, or if HTML5 validations aren’t supported by a browser you’ll want the app to run on, there are <a href="http://backbonejs.org/#Model-validate">model validations</a>. When creating a new model (and adding to a collection), you should check whether the model is valid <strong>first</strong> before adding it.
</p>

<p>
  A simple model validation looks like this:
</p>

<pre class="language-coffeescript"><code># The book model
# ==============

class Book extends Backbone.Model
  validate: (attributes) ->
    if _.isBlank attributes.title
      "Title can't be empty" </code></pre>

<pre class="language-javascript"><code>// The book model
// ==============

var Book = Backbone.Model.extend({
  validate: function(attributes) {
    if (_.isBlank(attributes.title)) {
      return "Title can't be empty";
    }
  }
});</code></pre>

<p>
  The view looks like this (pretend we have an <code>attributesFrom</code> method which pulls text field values from a jQuery form element):
</p>

<pre class="language-coffeescript"><code># Component for creating a new book from a form
# =============================================

class NewBookView extends Backbone.View
  template: JST['books/new']
  events:
    'submit .new-book-form': 'submitForm'

  submitForm: (event) ->
    event.preventDefault()
    attributes = @attributesFrom $ event.target
    model = new Book attributes
    if not model.isValid()
      # The error message will be in model.validationError. Ensure
      # the template takes that into consideration.
      @render()
    else
      model.save()
      App.Books.add model</code></pre>

<pre class="language-javascript"><code>// Component for creating a new book from a form
// =============================================

var NewBookView = Backbone.View.extend({
  template: JST['books/new'],
  events: {
    'submit .new-book-form': 'submitForm'
  },

  submitForm: function(event) {
    event.preventDefault();
    var attributes = this.attributesFrom($(event.target));
    var model = new Book(attributes);
    if (!model.isValid()) {
      // The error message will be in model.validationError. Ensure
      // the template takes that into consideration.
      this.render();
    } else {
      model.save();
      App.Books.add(model);
    }
  }
});</code></pre>

<p>
  Handling validations for when editing a model is a lot easier, as it’s assumed that the model is already in a collection, so there’s no need to deal that. Just ensure you’re trapping the right event when re-rendering the view.
</p>

<p>
  Assuming <code>BookListView</code>’s template carries a form along to allow for in-place editing:
</p>

<pre class="language-coffeescript"><code>class BookListView extends Backbone.View
  template: JST['books/list_entry']
  events:
    'submit .edit-book-form': 'submitForm'

  initialize: ->
    @listenTo @model, 'change invalid', @render

  # ...</code></pre>

<pre class="language-javascript"><code>var BookListView = Backbone.View.extend({
  template: JST['books/list_entry'],
  events: {
    'submit .edit-book-form': 'submitForm'
  },

  initialize: function() {
    this.listenTo(this.model, 'change invalid', this.render);
  },

  // ...
});</code></pre>

<p>
  As <code>change</code> won’t fire if the model is invalid, you’re declaring that when the model is made invalid, that the component should be rendered again. The template can then ensure the form is displayed with error messages on.
</p>

<%= partial :- %>

<p>
  Let the boudaries or markup be the limits of what a component touches, and code it so it works stand-alone.
</p>

<p>
  A view’s responsibility ends where the next data point begins. A view for a list of books will be in charge of things like displaying the total amount of books, and of tracking when books get added/removed to/from the collection. It’ll handle the logic <strong>for the group</strong> of books, but not for the individual books that get rendered by it. For that, it’ll call <code>BookListView</code>, pass a model to it, render that view and append what was rendered to its container, thus delegating the particulars of displaying a specific model to it.
</p>

<p>
  The best way to gauge whether you’re doing things right is really render a view to the screen on its own and see whether it renders and works without throwing errors. Though ensuring the styles look correct being a different story altogether than the one we’re discussing in this book, that’s what you should aim for.
</p>

<p>
  Even the <code>BookListView</code> mentioned before, which is the component for rendering a book in a list of books, it should render correctly when rendered outside of the list, in the “void”, so long as we pass a <code>Book</code> model to it (or a mock of one), and it can find its template. When writing tests for your components, that’s exactly what you will be doing in fact.
</p>

<%= partial :- %>

<p>
  Speaking of tests, DOM isolation will allow you to test most of a component without writing <strong>browser tests</strong>. Those are the gnarly, slow tests that everyone’s afraid of. The tests that ensure the <strong>logic</strong> behind your views and how they interact with your data is sound will run very fast, and they’ll be a lot more numerous than your browser tests, all things being well planned. Mind you, browser tests are necessary, but you’re better off isolating them from the rest, and perhaps running it off your normal testing cycle with a CI server.
</p>

<p>
  So avoid simple pitfalls like reading from the DOM. Always refer to a model/collection for the facts. You’re reading from the DOM when you do things like these:
</p>

<pre class="language-coffeescript"><code>togglePaid: ->
  if @$el.is '.paid'
    @model.set 'paid', no
</code></pre>

<pre class="language-javascript"><code>togglePaid: function() {
  if (this.$el.is('.paid')) {
    this.model.set('paid', false);
  }
}</code></pre>

<p>
  Or:
</p>

<pre class="language-coffeescript"><code>isEmpty: ->
  if @$el.find('.books-list').length is 0
    # ...</code></pre>

<pre class="language-javascript"><code>isEmpty: function() {
  if (this.$el.find('.books-list').length === 0) {
    // ...
  }
}</code></pre>

<p>
  That’s useless, and now those views are tied not only to their model/collection, but to the DOM as well, for simple stuff that could be obtained from the data model:
</p>

<pre class="language-coffeescript"><code>togglePaid: ->
  @model.set 'paid', !model.get('paid')</code></pre>

<pre class="language-javascript"><code>togglePaid: function() {
  return this.model.set('paid', !model.get('paid'));
}</code></pre>

<p>
  And:
</p>

<pre class="language-coffeescript"><code>isEmpty: ->
  if @collection.isEmpty()
    # ...</code></pre>

<pre class="language-javascript"><code>isEmpty: function() {
  if (this.collection.isEmpty()) {
    // ...
  }
}</code></pre>

<p>
  Remember: keep the point of contact between a component and the DOM restricted to what goes on in <code>render</code> and to writing to it, never reading.
</p>
