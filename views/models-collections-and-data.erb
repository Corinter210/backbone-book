<% @title = 'Models and collections' %>

<h1>
  Models, collections <span class="amp">&amp;</span> data
</h1>

<p class="mark">
  Although models may reflect logic that's on the server, they're not meant to mirror all of it. Replicating every relation and validation that exists on the other side is time wasted. It may come down to that, but there'll be a use case on the client app to justify it, or it's useless.
</p>

<%= partial :- %>

<p class="mark">
  Don't clutter models with a lot of methods for rendering attributes in different ways, human-friendly, different date formats, and so on. Write a presenter object that's separate from the model, which you can pass the model to it's methods and it'll handle that for you. Then pass that presenter to the view (more on that in the <a>views</a> chapter).
</p>

<%= partial :- %>

<p class="mark">
  Views will listen to attribute changes that happen on your models, so plan accordingly as you'll be listening to changes in specific attributes. For example, it's fine having an attribute in <code>Book</code> called <code>paid</code> that's stale, as in it exists only on the client side (the server knows it's paid because there's an associated payment entry). So just setting <code>paid</code> to <code>true</code> re-renders whatever view associated itself with this model and renders an appropriate template that shows that this thing is paid for.
</p>

<p>
  Before you cry that Backbone will always send every model attribute to the server when you <code>save()</code>, the solution is simple: declare a list of stale attributes (they're likely gonna be lesser in number than the others), and omit them from what gets sent by overriding <code>toJSON()</code>:
</p>

<pre><code>class Book extends Backbone.Model
  stale: ['paid']

  toJSON: ->
    _.omit @attributes, @stale</code></pre>

<%= partial :- %>

<p class="mark">
  Most apps communicate with a server using HTTP with a RESTful API. So the API URLs are of summary importance. Don't scatter them around the app. Write a module named <code>apiUrl</code> which exports a function with the same name. That module acts like a catalog of URLs, and model or collection that talks with the API has to require it. It looks like this:
</p>

<pre><code># List of API URLs.
URLs =
  books: ->
    "/api/books"
  book: (id) ->
    "/api/books/"
  subscriptions: (userId, id) ->
    "/api/users/#{userId}/subscriptions/#{id}"

# Helper for accessing the URL list. Think of it as something similar
# to Rails' URL helpers.
apiUrl = (type, args...) ->
  URLs[type]? args...</code></pre>

<p>
  Then forever (no exceptions) refer to URLs by calling this module. In a <code>Book</code> model, it'd look like this:
</p>

<pre><code>class Book extends Backbone.Model
  url: ->
    apiUrl 'book', @id</code></pre>

<%= partial :- %>

<p class="mark">
  Data associations are easy to solve without plugins <strong>if the server API is sane</strong>, so it's worth making it so otherwise your data layer will absorb your API's ugliness and amplify it by one hundred. Assume we have authors for those books I spoke of, and when fetching an author, I want to grab their books along. Say the API looks like this:
</p>

<pre><code>GET   /api/authors/1?with=books</code></pre>

<p>
  And by calling this URL I get the author object along with a <code>books</code> attribute which is an array of book objects, here's how you'd do it:
</p>

<pre><code>class Author extends Backbone.Model
  initialize: ->
    @books = new Books @get('books'), url: apiUrl('author books', @id)</code></pre>

<p>
  Now make sure from now on you refer to <strong>the collection</strong> (<code>author.books</code>) to access the values and not the container model attribute (<code>author.get 'books'</code>). The collection will contain the representation of what the author's books are, and will ensure the book model instances are in sync with the server as you add, remove, or edit them.
</p>

<%= partial :- %>

<p class="mark">
  Loading associated data (one to many) is trivial once you think for a second about what makes sense. Assume you have this URL in your app:
</p>

<pre><code>/authors/:id/books</code></pre>

<p>
  You need to grab the author first and then his/her books. This could go one of two ways: you have loaded the author before, and thus it's in memory, or you need to grab it from the server and then grab the books.
</p>

<p>
  Before you OCD about performance and think you should do this in one request, consider you're potentially creating an endpoint that will send down a huge amount of information. Correct use of caching, specifically <a href="http://en.wikipedia.org/wiki/HTTP_ETag">ETags</a>, will mitigate these problems by a lot.
</p>

<p>
  Inside the method that's called for that route, here's how you'll do it.
</p>

<pre><code>showBooks: (authorId) ->
  author = App.Authors.get authorId
  if author?
    author.books.fetch success: =>
      view = new BooksList collection: author.books
        # Render the view.
  else
    author = new Author id: authorId
    author.fetch success: =>
      App.Authors.add author
      author.books.fetch success: =>
        # Render the view.</code></pre>

<p>
  I can hear you having a heart attack over code repetition. But for starters, having the whole code that describes what happens when you visit each URL <strong>in the router itself</strong> is a terrible idea. I'll explain this refactor further ahead in the <a>router chapter</a>.
</p>

<%= partial :- %>

<p class="mark">
  The best way to handle pagination is by using  <a href="http://tools.ietf.org/html/rfc5988">link headers</a> (<a href="http://developer.github.com/v3/">GitHub's API uses it</a>). To be clear: pagination doesn't imply in your necessarily having <strong>pages</strong> of information. You could use this for infinite scrolling, or that. How you present it goes beyond what your collection needs to worry about.
</p>

<p>
  Integrating this with a Backbone collection is trivial (I'm using <a href="https://github.com/jfromaniello/parse-links">this</a> to parse it):
</p>

<pre><code>class PaginatedCollection extends Backbone.Collection
  link: {}

  parse: (response, options) ->
    link = options.xhr.getResponseHeader 'Link'
    @link = parseLinks link
    super</code></pre>

<p>
  Obviously, collections that need pagination should inherit from <code>PaginatedCollection</code>. From hereon, you can check for <code>link.last?</code>, <code>link.next?</code> and so on in collection instances to determine whether there's more data to be retrieved or not.
</p>

<p>
  And since this header is emitted in every request, the collection object is kept up to date everytime it interacts with the server.
</p>

<%= partial :- %>

<p class="mark">
  The concept of a full/partial model is handy for cases where the server API emits "light" representations of models. Like in the case above, getting a list of books for an author, it's quite likely that you'll want to render a list and then when a user clicks an entry, you fetch and show the full book.
</p>

<p>
  Which means you don't necessarily want a request to return the complete book objects if they'll be large and numerous (e.g.: containing a summary, comments, etc).
</p>

<pre><code># Partial model
# =============
#
# An implementation for partial models. A partial model is a model
# that's considered incomplete until it has all of it's attributes set
# to some value. You can alternatively specify which attributes need
# to be set for it to be complete.

class PartialModel extends Backbone.Model
  @completeIfHas: []

  isPartial: ->
    not _.every(
      _.map(@completeIfHas, (attr) => @attributes[attr]), _.isBlank
    )</code></pre>

<p>
  In the router, when fetching the model for rendering, you'd do:
</p>

<pre><code>showBook: (bookId) ->
  book = App.Books.get bookid
  if book? and not book.isPartial()
    # Just render the book.
  else
    # Fetch and then render it.</code></pre>

<%= partial :- %>

<p class="mark">
  Where and when you instance your collections has to be consistent with the data strategy you conceive. It seems popular to, on every route (when a URL is visited), you instance a collection, fetch data for it, pass it to a view and render it. But that pattern leaves out something you'll want 90% of the time, which is <strong>not</strong> discarding data you have already have.
</p>

<p>
  In the context of the previous example: the user visits the URL for a book, goes back to the list, visits a different book. Going back to the first book (say the user wants to double check something) needs to happen instantly. This doesn't mean you can't have the book model fetch data from the server everytime the URL is visited anyway, in case what's in the collection has gone stale, but it's worth rendering <strong>something</strong> right away. You can then re-render the book page as soon as <code>fetch()</code> succeeds.
</p>

<p>
  So say this app is about browsing authors and their books. Just instance and keep a "global" collection of authors around. Data always gets added to it as the user browses the app, similar to the previous examples where I referred to <code>App.Authors</code>. Pass this collection around either via a global or by requiring it in each subsequent module.
</p>

<p>
  Because every URL will always query whether the global collection contains an author and attempt to fetch it if not, you can keep the concern of flushing it to avoid reaching a point where you'll have thousands of authors in memory <strong>within</strong> the collection itself, which is ideal. You could do this maybe by ensuring the collection API endpoint supplies an ETag header that when changed, the next time the collection calls <code>fetch()</code> you pass <code>{ remove: true, reset: true }</code>. Or really query how many objects the collection has.
</p>

<%= partial :- %>

<p class="mark">
  Backbone Collections are really smart in how they handle data. By default, they won't allow duplicate IDs, and if you re-add an existing model, you can pass <a href="http://backbonejs.org/#Collection-add">an option</a> to <code>add()</code> which will get the collection to merge the attributes with the current model living in the collection.
</p>

<p>
  If you're wondering why that matters, think of this: you can keep models synchronous using HTTP and WebSockets/Server-side events simultaneously. So long as you make it so that every message coming from the server uses the collection methods (<code>add()</code>, <code>remove()</code>), you can literally add real-time to an app on top of an existing HTTP/REST API without interfering with it at all, and enable or disable the functionality without the app breaking.
</p>
